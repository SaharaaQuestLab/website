---
interface Props {
  text?: string;
}

const { text = "" } = Astro.props;
---

<text-typing>
  <span data-text={text} id="typewriterContent">
    {text.split('').map(item => (<span class="typewriter-item" style="opacity
  :0">{item}</span>))}
  </span>
</text-typing>

<script>
  import { gsap } from "gsap";

  // 为我们的新 HTML 自定义元素定义行为。
  class TextTyping extends HTMLElement {
    constructor() {
      super();
      this.init();
    }
    init = () => {
      const typewriter = this.querySelector(`#typewriterContent`);
      if (!typewriter) return;
      const lines = gsap.utils.toArray(this.querySelectorAll(`.typewriter-item`));
      // 创建一个 GSAP 时间线
      const tl = gsap.timeline({
        repeat: 0,
        delay: 0,
        scrollTrigger: {
          trigger: typewriter,
          start: "top bottom",
        }
      });

      // 对每一行文本创建动画
      lines.forEach((line, index) => {
        tl.to(
          line as HTMLElement,
          { duration: 0, opacity: 1, onUpdate: () => {
            line.className = 'typewriter-item flash-item'
          }},
          `+=${0.04 + 0.15/(index%(lines.length-5)+1)}`
        )
      });
    }
  }
  customElements.define("text-typing", TextTyping);
</script>
<style>
  .flash-item {
    opacity: 1;
    animation: blink 0.7s; /* 光标闪烁动画 */
  }

  /* 光标闪烁关键帧 */
  @keyframes blink {
    0%,
    50% {
      background: #E1E4E7;
    }
    50.1%,
    100% {
      background: transparent;
    }
  }
</style>
