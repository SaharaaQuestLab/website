---
interface Props {
  text?: string;
  delay?: string;
  repeatDelay?: number;
}

const { text = "", delay, repeatDelay = 4} = Astro.props;
---

<text-typing data-delay={delay} data-repeatDelay={repeatDelay}>
  <span data-text={text} id="typewriterContent">
    {
      text
        .split("")
        .map((item) => (
          <span class="typewriter-item" style="opacity:0" set:text={item} />
        ))
    }
  </span>
</text-typing>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  // 为我们的新 HTML 自定义元素定义行为。
  class TextTyping extends HTMLElement {
    constructor() {
      super();
      this.init();
    }
    init = () => {
      const typewriter = this.querySelector(`#typewriterContent`);
      if (!typewriter) return;
      const lines = gsap.utils.toArray(
        this.querySelectorAll(`.typewriter-item`),
      ) as HTMLElement[];
      // 创建一个 GSAP 时间线
      const tl = gsap.timeline({
        repeat: -1,
        delay: Number(this.getAttribute('data-delay')) ?? 0,
        repeatDelay: Number(this.getAttribute('data-repeatDelay')),
        scrollTrigger: {
          trigger: typewriter,
          start: "top bottom",
        },
      });

      // 对每一行文本创建动画
      lines.forEach((line, index) => {
        tl.to(
          line as HTMLElement,
          {
            duration: 0,
            opacity: 1,
            onUpdate: () => {
              line.className = "typewriter-item";
            },
            onComplete: () => {
              line.className = "typewriter-item flash-item";
            },
          },
          `+=${0.05 + 0.15 / ((index % (lines.length - 5)) + 1)}`,
        );
      });
      tl.eventCallback("onRepeat", () => {
        lines.forEach((line) => {
          gsap.set(line, { opacity: 0 });
          line.className = "typewriter-item";
        });
      });
    };
  }
  customElements.define("text-typing", TextTyping);
</script>
<style>
  .typewriter-item {
    display: inline-block;
    min-width: 0.2em;
  }
  .flash-item {
    opacity: 1;
    animation: blink 0.3s; /* 光标闪烁动画 */
  }

  /* 光标闪烁关键帧 */
  @keyframes blink {
    0%,
    100% {
      background: #e1e4e7;
      color: transparent;
    }
    /* 99.1%,
    100% {
      background: transparent;
    } */
  }
</style>
